!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=5)}([function(t,n){t.exports=require("fs")},function(t,n){t.exports=require("path")},function(t,n){t.exports=require("url")},function(t,n){t.exports=require("electron")},function(t,n,e){"use strict";e.r(n),e.d(n,"__extends",function(){return o}),e.d(n,"__assign",function(){return u}),e.d(n,"__rest",function(){return i}),e.d(n,"__decorate",function(){return c}),e.d(n,"__param",function(){return a}),e.d(n,"__metadata",function(){return f}),e.d(n,"__awaiter",function(){return l}),e.d(n,"__generator",function(){return s}),e.d(n,"__exportStar",function(){return p}),e.d(n,"__values",function(){return d}),e.d(n,"__read",function(){return y}),e.d(n,"__spread",function(){return _}),e.d(n,"__await",function(){return h}),e.d(n,"__asyncGenerator",function(){return b}),e.d(n,"__asyncDelegator",function(){return w}),e.d(n,"__asyncValues",function(){return v}),e.d(n,"__makeTemplateObject",function(){return m}),e.d(n,"__importStar",function(){return O}),e.d(n,"__importDefault",function(){return x});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])};function o(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}var u=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t};function i(t,n){var e={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&n.indexOf(r)<0&&(e[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)n.indexOf(r[o])<0&&(e[r[o]]=t[r[o]])}return e}function c(t,n,e,r){var o,u=arguments.length,i=u<3?n:null===r?r=Object.getOwnPropertyDescriptor(n,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,n,e,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(i=(u<3?o(i):u>3?o(n,e,i):o(n,e))||i);return u>3&&i&&Object.defineProperty(n,e,i),i}function a(t,n){return function(e,r){n(e,r,t)}}function f(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)}function l(t,n,e,r){return new(e||(e=Promise))(function(o,u){function i(t){try{a(r.next(t))}catch(t){u(t)}}function c(t){try{a(r.throw(t))}catch(t){u(t)}}function a(t){t.done?o(t.value):new e(function(n){n(t.value)}).then(i,c)}a((r=r.apply(t,n||[])).next())})}function s(t,n){var e,r,o,u,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return u={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(u[Symbol.iterator]=function(){return this}),u;function c(u){return function(c){return function(u){if(e)throw new TypeError("Generator is already executing.");for(;i;)try{if(e=1,r&&(o=r[2&u[0]?"return":u[0]?"throw":"next"])&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[0,o.value]),u[0]){case 0:case 1:o=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,r=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){i=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){i.label=u[1];break}if(6===u[0]&&i.label<o[1]){i.label=o[1],o=u;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(u);break}o[2]&&i.ops.pop(),i.trys.pop();continue}u=n.call(t,i)}catch(t){u=[6,t],r=0}finally{e=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function p(t,n){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}function d(t){var n="function"==typeof Symbol&&t[Symbol.iterator],e=0;return n?n.call(t):{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}}}function y(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,u=e.call(t),i=[];try{for(;(void 0===n||n-- >0)&&!(r=u.next()).done;)i.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=u.return)&&e.call(u)}finally{if(o)throw o.error}}return i}function _(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(y(arguments[n]));return t}function h(t){return this instanceof h?(this.v=t,this):new h(t)}function b(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),u=[];return r={},i("next"),i("throw"),i("return"),r[Symbol.asyncIterator]=function(){return this},r;function i(t){o[t]&&(r[t]=function(n){return new Promise(function(e,r){u.push([t,n,e,r])>1||c(t,n)})})}function c(t,n){try{(e=o[t](n)).value instanceof h?Promise.resolve(e.value.v).then(a,f):l(u[0][2],e)}catch(t){l(u[0][3],t)}var e}function a(t){c("next",t)}function f(t){c("throw",t)}function l(t,n){t(n),u.shift(),u.length&&c(u[0][0],u[0][1])}}function w(t){var n,e;return n={},r("next"),r("throw",function(t){throw t}),r("return"),n[Symbol.iterator]=function(){return this},n;function r(r,o){t[r]&&(n[r]=function(n){return(e=!e)?{value:h(t[r](n)),done:"return"===r}:o?o(n):n})}}function v(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=t[Symbol.asyncIterator];return n?n.call(t):d(t)}function m(t,n){return Object.defineProperty?Object.defineProperty(t,"raw",{value:n}):t.raw=n,t}function O(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}function x(t){return t&&t.__esModule?t:{default:t}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(4),o=e(3),u=r.__importDefault(e(2)),i=r.__importDefault(e(1)),c=r.__importDefault(e(0));let a;function f(){a=new o.BrowserWindow({width:800,height:600,show:!1,webPreferences:{webSecurity:!1}});let t=i.default.join(__dirname,"index.html");if(!c.default.existsSync(t))throw Error(`Unable to find the index.html file to load. File Path: ${t}`);a.loadURL(u.default.format({pathname:i.default.join(__dirname,"index.html"),protocol:"file:"})),a.webContents.openDevTools(),a.once("ready-to-show",()=>{a.show(),a.focus()}),a.on("closed",()=>{a.destroy()})}o.app.on("ready",f),o.app.on("window-all-closed",()=>{"darwin"!==process.platform&&o.app.quit()}),o.app.on("activate",()=>{null===a&&f()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,